// <auto-generated />
using System;
using JobSearch.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobSearch.Persistence.Migrations
{
    [DbContext(typeof(JobSearchDbContext))]
    [Migration("20231215222800_DataSeed")]
    partial class DataSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobSearch.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("28eae083-2a81-46d2-8f61-3caef8da407c"),
                            Name = "Founder"
                        },
                        new
                        {
                            Id = new Guid("e119c4fb-5ba5-4bd4-83c3-cb8ec2d72688"),
                            Name = "Recruiter"
                        },
                        new
                        {
                            Id = new Guid("9d913087-d36d-4a5c-ab9d-e9d7845d48e2"),
                            Name = "Worker"
                        });
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Institution.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("SectorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById")
                        .IsUnique();

                    b.HasIndex("SectorId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Institution.Sector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4901614-5e4f-4b47-b72b-7a21585263eb"),
                            Name = "Information Technologies"
                        });
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.JobPost.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8aaf619e-e69e-4178-b5e0-04344d04b429"),
                            Name = "Software Development"
                        });
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.JobPost.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkTypeId")
                        .HasColumnType("uuid");

                    b.Property<byte>("YearsOfExperience")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("WorkModelId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.JobPost.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<int>("PeriodOfNotice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<decimal>("SalaryExpection")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("JobId");

                    b.ToTable("JobApplication");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Location.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Location.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Türkiye"
                        });
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Location.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = new Guid("afadb6da-1e5b-4b17-ab6b-aa096e287747"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Adana"
                        },
                        new
                        {
                            Id = new Guid("ec2dac58-fa5e-4c77-a838-458aea179e38"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Adıyaman"
                        },
                        new
                        {
                            Id = new Guid("341a9ff6-7bf5-4df8-af4a-c0bfe07d89d6"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Afyonkarahisar"
                        },
                        new
                        {
                            Id = new Guid("e0c4e248-f4ea-41ad-8582-fd32a546bff0"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Ağrı"
                        },
                        new
                        {
                            Id = new Guid("07bcd57d-aefb-43f1-9e36-d7d4971a5a8c"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Aksaray"
                        },
                        new
                        {
                            Id = new Guid("afff5fff-7e5d-44be-b600-0acae61e8c46"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Amasya"
                        },
                        new
                        {
                            Id = new Guid("3af8f7ca-d309-40ef-a0f8-70394f3601ca"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = new Guid("d81d708a-bf1f-488f-89da-7cab2ed48808"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Antalya"
                        },
                        new
                        {
                            Id = new Guid("2c1b05b9-d901-4f59-b339-8aab9f488573"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Ardahan"
                        },
                        new
                        {
                            Id = new Guid("dbf9cbf2-0807-4ade-8db4-cc034e480a45"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Artvin"
                        },
                        new
                        {
                            Id = new Guid("8882f248-a914-488a-9b07-0eedb7890b3d"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Aydın"
                        },
                        new
                        {
                            Id = new Guid("84f5b8cb-ef95-46aa-8fee-e3add60c0f47"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Balıkesir"
                        },
                        new
                        {
                            Id = new Guid("22980679-6595-40e9-b6f7-f96a965f9d50"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Bartın"
                        },
                        new
                        {
                            Id = new Guid("42b8c678-5362-42e8-9329-5bcf8356b550"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Batman"
                        },
                        new
                        {
                            Id = new Guid("89368a6d-5c07-4c63-b4a8-d85ef5863db1"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Bayburt"
                        },
                        new
                        {
                            Id = new Guid("44b7e10b-3119-4dea-9f5f-c381087b5a94"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Bilecik"
                        },
                        new
                        {
                            Id = new Guid("e9176056-873a-4ee1-b88c-696f804485a3"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Bingöl"
                        },
                        new
                        {
                            Id = new Guid("2302ac73-09fd-4842-82fc-d2ce8ccfc86e"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Bitlis"
                        },
                        new
                        {
                            Id = new Guid("c7062da2-bb46-4870-a11a-9125f4935017"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Bolu"
                        },
                        new
                        {
                            Id = new Guid("92546053-06c8-4df6-8e7b-d9eba9f92891"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Burdur"
                        },
                        new
                        {
                            Id = new Guid("da899578-fb82-46f4-8e75-3f0d7498dc83"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Bursa"
                        },
                        new
                        {
                            Id = new Guid("3b818efa-0481-44d3-9f7f-06f043e3ce60"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Çanakkale"
                        },
                        new
                        {
                            Id = new Guid("c84997da-7f0b-43e8-9186-9aa0161d3f96"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Çankırı"
                        },
                        new
                        {
                            Id = new Guid("f86c8bfe-00a9-40e8-afbc-6df0f8ec7932"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Çorum"
                        },
                        new
                        {
                            Id = new Guid("92012984-1a16-4533-8e84-9747f61742b4"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Denizli"
                        },
                        new
                        {
                            Id = new Guid("56ab7d11-a050-4fa9-9606-df9e08976acc"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Diyarbakır"
                        },
                        new
                        {
                            Id = new Guid("659673b4-05c7-45c0-b943-6ac90746c4a8"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Düzce"
                        },
                        new
                        {
                            Id = new Guid("c74b2636-c733-4b5a-9c9a-3af49fae855e"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Edirne"
                        },
                        new
                        {
                            Id = new Guid("068d6c9f-846b-43b3-af78-9d715ff377be"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Elazığ"
                        },
                        new
                        {
                            Id = new Guid("2f08590d-617b-4959-ae4b-89fa47ececa1"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Erzincan"
                        },
                        new
                        {
                            Id = new Guid("026da2cd-32fa-4cce-b439-3bfdd17890f7"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Erzurum"
                        },
                        new
                        {
                            Id = new Guid("15ed2dfa-cb2d-4a78-8518-a0b002046e21"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Eskişehir"
                        },
                        new
                        {
                            Id = new Guid("fe70d87c-b0d3-481f-bfc6-3ddf274e8fc3"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Gaziantep"
                        },
                        new
                        {
                            Id = new Guid("2369d340-b894-4118-bb49-9e37307c9759"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Giresun"
                        },
                        new
                        {
                            Id = new Guid("f5f36342-43f6-46e9-9a92-6c95e0d46315"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Gümüşhane"
                        },
                        new
                        {
                            Id = new Guid("1e1eb6c5-d6ca-45d1-b019-5853bcfd2a95"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Hakkâri"
                        },
                        new
                        {
                            Id = new Guid("15bb8217-3c85-433f-9f7d-6a503993ec3f"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Hatay"
                        },
                        new
                        {
                            Id = new Guid("f1e8ff25-1c65-494a-8e0f-55091405f709"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Iğdır"
                        },
                        new
                        {
                            Id = new Guid("cb92bfb2-105e-4e2d-a3ed-d9a9956887bd"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Isparta"
                        },
                        new
                        {
                            Id = new Guid("33cc6a14-8c88-46be-bd54-9248350f4999"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "İstanbul"
                        },
                        new
                        {
                            Id = new Guid("822e1547-f45f-44eb-8c7b-9c48b6511190"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "İzmir"
                        },
                        new
                        {
                            Id = new Guid("0dac1c81-af4b-4b8f-8d29-c6d2a08b35f2"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kahramanmaraş"
                        },
                        new
                        {
                            Id = new Guid("f8e06883-9d94-4b84-aee2-8947976e9e33"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Karabük"
                        },
                        new
                        {
                            Id = new Guid("86297fe6-549e-404b-8916-9025151bf72f"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Karaman"
                        },
                        new
                        {
                            Id = new Guid("e75da4b0-b49e-4ec1-8617-47d96382ca56"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kars"
                        },
                        new
                        {
                            Id = new Guid("0cf93f07-2a12-48ff-b694-5d2deb35fa13"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kastamonu"
                        },
                        new
                        {
                            Id = new Guid("42a19744-173f-40c3-bd72-31a6a5a0e0ef"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kayseri"
                        },
                        new
                        {
                            Id = new Guid("b8430d0d-45dc-4691-a9ef-51b41865609e"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kilis"
                        },
                        new
                        {
                            Id = new Guid("58347f51-7074-4e4a-b370-f4111d7781ef"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kırıkkale"
                        },
                        new
                        {
                            Id = new Guid("c871e15a-46b5-4e35-badd-05d22b369451"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kırklareli"
                        },
                        new
                        {
                            Id = new Guid("6a050542-1f66-4986-b5eb-19cd20e127f8"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kırşehir"
                        },
                        new
                        {
                            Id = new Guid("d1398437-9db7-4a96-9b0b-810f68832538"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kocaeli"
                        },
                        new
                        {
                            Id = new Guid("9a5ae024-ce77-42f4-8b76-b602a5688977"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Konya"
                        },
                        new
                        {
                            Id = new Guid("7ec2f5f4-8c49-494d-b71a-6900916c73ec"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kütahya"
                        },
                        new
                        {
                            Id = new Guid("d0e27f5b-69a4-4da4-bd48-34cb33de5e91"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Malatya"
                        },
                        new
                        {
                            Id = new Guid("ccf13bae-c912-457c-a9b6-d45d22f1f85a"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Manisa"
                        },
                        new
                        {
                            Id = new Guid("9a147d65-8eda-423c-8598-f255d8fa7904"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Mardin"
                        },
                        new
                        {
                            Id = new Guid("10eb6a1c-bd73-425a-819f-1c4152b58504"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Mersin"
                        },
                        new
                        {
                            Id = new Guid("5c2bb592-8e0c-4fce-a2f6-13cdf313e96a"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Muğla"
                        },
                        new
                        {
                            Id = new Guid("01c64893-2322-4d97-a57d-2b027d7094ed"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Muş"
                        },
                        new
                        {
                            Id = new Guid("226992e1-745e-41f4-9b33-a2f25ac0ac5b"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Nevşehir"
                        },
                        new
                        {
                            Id = new Guid("c72f3d87-b5c4-42f6-b758-0ecd9e00903a"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Niğde"
                        },
                        new
                        {
                            Id = new Guid("a67e7220-0581-47ee-ad12-6712d2130e27"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Ordu"
                        },
                        new
                        {
                            Id = new Guid("feb74df2-020e-493b-b9c0-b041e64eb9c5"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Osmaniye"
                        },
                        new
                        {
                            Id = new Guid("fac79587-6a53-4ab3-b256-147c7cacea35"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Rize"
                        },
                        new
                        {
                            Id = new Guid("c9235fc1-deed-48b7-90a7-98bad6bc645c"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Sakarya"
                        },
                        new
                        {
                            Id = new Guid("27eaf14a-8dea-454e-ba33-bd13b1b45c54"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Samsun"
                        },
                        new
                        {
                            Id = new Guid("61f5cf40-8c8d-4769-91c4-b4b0b287b6bd"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Şanlıurfa"
                        },
                        new
                        {
                            Id = new Guid("64d5218b-8c68-4af2-ac5e-904a595c569b"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Siirt"
                        },
                        new
                        {
                            Id = new Guid("5a5d5def-8ed7-454f-a2f0-fee36fdcf77a"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Sinop"
                        },
                        new
                        {
                            Id = new Guid("66ac5fd9-5117-4213-b801-1708fd1f7bed"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Sivas"
                        },
                        new
                        {
                            Id = new Guid("ab4bb637-9c6b-4528-8b20-df90248632f8"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Şırnak"
                        },
                        new
                        {
                            Id = new Guid("a2bb2a56-2f4c-4e1a-bfad-13b270529314"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Tekirdağ"
                        },
                        new
                        {
                            Id = new Guid("b75df8f3-816a-4f81-a631-58defbe1fed9"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Tokat"
                        },
                        new
                        {
                            Id = new Guid("4dee908d-51ff-48c7-a981-427da16adcd4"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Trabzon"
                        },
                        new
                        {
                            Id = new Guid("5d2a90ab-587f-4169-91a6-4fc19054bcac"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Tunceli"
                        },
                        new
                        {
                            Id = new Guid("88775666-3b0b-4a3d-aeae-4f53ddbc51f1"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Uşak"
                        },
                        new
                        {
                            Id = new Guid("1fa3415d-fab0-4924-821f-d749258b1927"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Van"
                        },
                        new
                        {
                            Id = new Guid("867b407d-5690-4919-b8c5-550ffd8801b8"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Yalova"
                        },
                        new
                        {
                            Id = new Guid("b64c35ea-750e-4e24-9270-d96a26e4bac1"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Yozgat"
                        },
                        new
                        {
                            Id = new Guid("4d5a174b-464d-4d8f-b0b8-f82e3e8dbfc4"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Zonguldak"
                        });
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.WorkPreference.WorkModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.ToTable("WorkModels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be2d4821-3c84-4552-b292-6305887b8fed"),
                            Name = "In-office"
                        },
                        new
                        {
                            Id = new Guid("5cfdd002-0e17-4f85-9785-af001251c568"),
                            Name = "Hybrid"
                        },
                        new
                        {
                            Id = new Guid("4cfa49e2-005a-45eb-a87d-63a35aa4a1b0"),
                            Name = "Remote"
                        });
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.WorkPreference.WorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.ToTable("WorkTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00b46edd-6fc4-4999-a141-a01d95d82ee3"),
                            Name = "Full-time"
                        },
                        new
                        {
                            Id = new Guid("eb124238-70cf-41f6-b5a2-f515c25515f2"),
                            Name = "Part-time"
                        },
                        new
                        {
                            Id = new Guid("d68427a8-96bb-4590-bf6f-29abbe47733f"),
                            Name = "Project-basis"
                        },
                        new
                        {
                            Id = new Guid("6116ed65-8da7-4820-9a92-8bd89caf03ab"),
                            Name = "Intern"
                        },
                        new
                        {
                            Id = new Guid("e6d8e023-8061-455a-98c1-ed8ccde1db3f"),
                            Name = "Freelance"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Identity.AppUser", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Institution.Company", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", "CreatedBy")
                        .WithOne("Company")
                        .HasForeignKey("JobSearch.Domain.Entities.Institution.Company", "CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Domain.Entities.Institution.Sector", "Sector")
                        .WithMany("Companies")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.JobPost.Job", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Institution.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", "CreatedBy")
                        .WithMany("Jobs")
                        .HasForeignKey("CreatedById");

                    b.HasOne("JobSearch.Domain.Entities.JobPost.Department", "Department")
                        .WithMany("Jobs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Domain.Entities.WorkPreference.WorkModel", "WorkModel")
                        .WithMany("Jobs")
                        .HasForeignKey("WorkModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Domain.Entities.WorkPreference.WorkType", "WorkType")
                        .WithMany("Jobs")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("WorkModel");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.JobPost.JobApplication", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", "Applicant")
                        .WithMany("JobApplications")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Domain.Entities.JobPost.Job", "Job")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Location.Address", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Institution.Company", "Company")
                        .WithOne("Address")
                        .HasForeignKey("JobSearch.Domain.Entities.Location.Address", "CompanyId");

                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", "CreatedBy")
                        .WithMany("Addresses")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Domain.Entities.Location.Province", "Province")
                        .WithMany("Addresses")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CreatedBy");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Location.Province", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Location.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Company");

                    b.Navigation("JobApplications");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Institution.Company", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Institution.Sector", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.JobPost.Department", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.JobPost.Job", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Location.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Location.Province", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.WorkPreference.WorkModel", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.WorkPreference.WorkType", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
