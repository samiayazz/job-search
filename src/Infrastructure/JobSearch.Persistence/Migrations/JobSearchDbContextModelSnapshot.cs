// <auto-generated />
using System;
using JobSearch.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobSearch.Persistence.Migrations
{
    [DbContext(typeof(JobSearchDbContext))]
    partial class JobSearchDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobSearch.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("28eae083-2a81-46d2-8f61-3caef8da407c"),
                            Name = "Founder"
                        },
                        new
                        {
                            Id = new Guid("e119c4fb-5ba5-4bd4-83c3-cb8ec2d72688"),
                            Name = "Recruiter"
                        },
                        new
                        {
                            Id = new Guid("9d913087-d36d-4a5c-ab9d-e9d7845d48e2"),
                            Name = "Worker"
                        });
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Institution.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("SectorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById")
                        .IsUnique();

                    b.HasIndex("SectorId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Institution.Sector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4901614-5e4f-4b47-b72b-7a21585263eb"),
                            Name = "Information Technologies"
                        });
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.JobPost.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8aaf619e-e69e-4178-b5e0-04344d04b429"),
                            Name = "Software Development"
                        });
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.JobPost.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkTypeId")
                        .HasColumnType("uuid");

                    b.Property<byte>("YearsOfExperience")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("WorkModelId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.JobPost.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<int>("PeriodOfNotice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<decimal>("SalaryExpection")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("JobId");

                    b.ToTable("JobApplication");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Location.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Location.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Türkiye"
                        });
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Location.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f57e51e0-75f0-4137-b0ff-d134fd99de8c"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Adana"
                        },
                        new
                        {
                            Id = new Guid("0e731806-4106-4d82-830f-ed769c7d707b"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Adıyaman"
                        },
                        new
                        {
                            Id = new Guid("bb31211b-8b7e-4447-a01a-38d6a3632dc4"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Afyonkarahisar"
                        },
                        new
                        {
                            Id = new Guid("1ba5a6bf-ca2b-4a28-82ce-4ce6f7820cf1"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Ağrı"
                        },
                        new
                        {
                            Id = new Guid("da6f029e-4db3-4df8-be86-e52023550fa3"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Aksaray"
                        },
                        new
                        {
                            Id = new Guid("c00ab512-b7ea-494c-973f-ac18d571e75c"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Amasya"
                        },
                        new
                        {
                            Id = new Guid("99e323c0-1fde-4fd7-9d21-791d5ed69953"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = new Guid("4387db05-0d8a-457b-a0cf-d6eeb7338fb9"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Antalya"
                        },
                        new
                        {
                            Id = new Guid("1390b4ab-7d7d-41e1-ac51-fa7c71aea19e"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Ardahan"
                        },
                        new
                        {
                            Id = new Guid("b6dd1bfc-5f0c-41c3-9000-1530d1d2d54d"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Artvin"
                        },
                        new
                        {
                            Id = new Guid("673cf643-6544-4fb3-9252-9588cfa35d74"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Aydın"
                        },
                        new
                        {
                            Id = new Guid("fb795c40-07b8-47c5-a400-5d1374153bcd"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Balıkesir"
                        },
                        new
                        {
                            Id = new Guid("2ac287fd-bab3-45c1-aed4-3f52ae20d330"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Bartın"
                        },
                        new
                        {
                            Id = new Guid("aa1bdb1e-2c43-495f-9f58-36fdd391d52c"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Batman"
                        },
                        new
                        {
                            Id = new Guid("e0db3a58-3ceb-4165-962d-cf7ec0dccf9a"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Bayburt"
                        },
                        new
                        {
                            Id = new Guid("9f476312-2e11-4818-857b-888fb26372b8"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Bilecik"
                        },
                        new
                        {
                            Id = new Guid("1bc323a8-4277-433a-8202-a46a54a84f16"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Bingöl"
                        },
                        new
                        {
                            Id = new Guid("6907ebe8-35c3-4328-b6ed-97b09fba370c"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Bitlis"
                        },
                        new
                        {
                            Id = new Guid("b0b6ec04-ef66-46f6-be1f-9ac9c532b4a6"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Bolu"
                        },
                        new
                        {
                            Id = new Guid("af0084ce-c3da-4fa9-9e98-2b765400d9a4"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Burdur"
                        },
                        new
                        {
                            Id = new Guid("13d65077-65eb-4926-ae94-28141ba60633"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Bursa"
                        },
                        new
                        {
                            Id = new Guid("ac487de7-0ed5-4d03-ab99-3a35422dfabe"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Çanakkale"
                        },
                        new
                        {
                            Id = new Guid("0fd823d6-1d1a-46b0-b889-2807426683b4"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Çankırı"
                        },
                        new
                        {
                            Id = new Guid("2713ee60-ccaa-4168-9c6d-5d88fe3e0469"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Çorum"
                        },
                        new
                        {
                            Id = new Guid("04066d07-a60e-4625-8091-2644626b861b"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Denizli"
                        },
                        new
                        {
                            Id = new Guid("c73329c5-0a64-4b1d-bb63-34906a9a0110"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Diyarbakır"
                        },
                        new
                        {
                            Id = new Guid("79912c0c-f671-4484-9030-15b3e3c6fc51"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Düzce"
                        },
                        new
                        {
                            Id = new Guid("d99ba584-ee71-4b05-90d3-a5b8e5280d46"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Edirne"
                        },
                        new
                        {
                            Id = new Guid("3a70fd06-4046-4ef7-93db-f89cdaf26e48"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Elazığ"
                        },
                        new
                        {
                            Id = new Guid("83c72b95-c215-48af-8bba-983d8458cc51"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Erzincan"
                        },
                        new
                        {
                            Id = new Guid("c93c59ce-36bc-4c72-b667-f92766978dc1"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Erzurum"
                        },
                        new
                        {
                            Id = new Guid("cebb3723-2118-49fe-acc1-73723d3fc90c"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Eskişehir"
                        },
                        new
                        {
                            Id = new Guid("aaaefd47-af7c-4bff-a97a-8c204f5b0b73"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Gaziantep"
                        },
                        new
                        {
                            Id = new Guid("4adaebbd-b515-4751-ad21-2b1dd0c4b547"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Giresun"
                        },
                        new
                        {
                            Id = new Guid("896f1c07-8a0f-4dd8-aedd-2a3e4dcea9f5"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Gümüşhane"
                        },
                        new
                        {
                            Id = new Guid("20c14b59-1d8c-4b39-8821-06170bafbed4"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Hakkâri"
                        },
                        new
                        {
                            Id = new Guid("15cf425c-7bac-4084-bfad-1158f6b8ad17"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Hatay"
                        },
                        new
                        {
                            Id = new Guid("943a7cdc-6157-4836-afb6-deceb3f1426f"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Iğdır"
                        },
                        new
                        {
                            Id = new Guid("61bb6f10-0f92-485d-b8b5-36d48456cda5"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Isparta"
                        },
                        new
                        {
                            Id = new Guid("72f50578-4412-4884-b57b-6475aceb1b01"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "İstanbul"
                        },
                        new
                        {
                            Id = new Guid("4d5df297-3439-4562-aff0-cbd0ba9cadc2"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "İzmir"
                        },
                        new
                        {
                            Id = new Guid("a0b85136-a480-4aeb-a2fc-33a906a3d885"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kahramanmaraş"
                        },
                        new
                        {
                            Id = new Guid("16d38f6d-c657-42d3-a5fc-6d412c1db443"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Karabük"
                        },
                        new
                        {
                            Id = new Guid("3c560543-f746-49bb-b6d5-7c83c47c69e7"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Karaman"
                        },
                        new
                        {
                            Id = new Guid("12eaca1a-ac46-42b1-a7ba-9b3fac910aba"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kars"
                        },
                        new
                        {
                            Id = new Guid("41c0d76b-4bc9-4f24-93b2-3fc777e4fd4a"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kastamonu"
                        },
                        new
                        {
                            Id = new Guid("b188d103-4f67-4801-9e71-e000550a4abf"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kayseri"
                        },
                        new
                        {
                            Id = new Guid("62589d4c-89ca-445a-bbd2-7bf5d85763bd"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kilis"
                        },
                        new
                        {
                            Id = new Guid("b69efb5d-5399-4b68-ae77-b543f8864d30"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kırıkkale"
                        },
                        new
                        {
                            Id = new Guid("3a02e993-35e5-4bcb-abfe-59eac7f0bf5e"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kırklareli"
                        },
                        new
                        {
                            Id = new Guid("cae9529a-c537-4776-9bdf-6990e5b5836c"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kırşehir"
                        },
                        new
                        {
                            Id = new Guid("457a5f59-9f63-4bdb-b5a2-ae538eb8bf65"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kocaeli"
                        },
                        new
                        {
                            Id = new Guid("7a6f15d4-e621-450f-aef3-802f0c8b6ceb"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Konya"
                        },
                        new
                        {
                            Id = new Guid("2c7d027a-dfd5-4286-849a-fdef46cbc80f"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Kütahya"
                        },
                        new
                        {
                            Id = new Guid("7066d192-0336-42db-8df3-cbc0c6cc1c11"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Malatya"
                        },
                        new
                        {
                            Id = new Guid("a6cb4e0b-3676-4a97-92dd-73d92c2923fe"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Manisa"
                        },
                        new
                        {
                            Id = new Guid("1259629c-75e8-4f5f-84a4-1328e08c82da"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Mardin"
                        },
                        new
                        {
                            Id = new Guid("50c12697-2cc4-4994-b233-ee7f95493741"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Mersin"
                        },
                        new
                        {
                            Id = new Guid("bd19d9c8-f78b-451f-b6c4-f094fbbf381a"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Muğla"
                        },
                        new
                        {
                            Id = new Guid("3da00853-84c1-440b-9a59-6947aebf2473"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Muş"
                        },
                        new
                        {
                            Id = new Guid("208e01fe-6d34-40b6-826c-7b634470a8b7"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Nevşehir"
                        },
                        new
                        {
                            Id = new Guid("859faa0f-2e26-42fc-91e3-b071509a6c5f"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Niğde"
                        },
                        new
                        {
                            Id = new Guid("5bd1d662-3dfb-4b33-9e4d-5989c7e8ca56"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Ordu"
                        },
                        new
                        {
                            Id = new Guid("9767de23-afb6-4d84-916e-ce5a85ef51ec"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Osmaniye"
                        },
                        new
                        {
                            Id = new Guid("83587dc7-c645-4921-8d85-534b6bbe96b0"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Rize"
                        },
                        new
                        {
                            Id = new Guid("729d8348-e1d4-42a8-a963-a2e3c80c0c04"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Sakarya"
                        },
                        new
                        {
                            Id = new Guid("31c24afc-fe7c-41e1-934a-5c5038345193"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Samsun"
                        },
                        new
                        {
                            Id = new Guid("8866bb68-c8c2-4d5b-9fc4-7a2abea920da"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Şanlıurfa"
                        },
                        new
                        {
                            Id = new Guid("d85b01f8-50dd-4d19-a56d-4b0f85466433"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Siirt"
                        },
                        new
                        {
                            Id = new Guid("38fd4fe1-ab62-49d3-8416-3f29e4db0a59"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Sinop"
                        },
                        new
                        {
                            Id = new Guid("ae05442a-5723-45cc-b9cc-ea69109b1e4e"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Sivas"
                        },
                        new
                        {
                            Id = new Guid("4fddfeb6-9036-477b-bd4d-bf7e24d71e8a"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Şırnak"
                        },
                        new
                        {
                            Id = new Guid("7a484df6-aa59-45da-ad4c-8d8d2fc459ae"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Tekirdağ"
                        },
                        new
                        {
                            Id = new Guid("4e20d997-e2a0-4725-bb83-8fb130642659"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Tokat"
                        },
                        new
                        {
                            Id = new Guid("e0d0edc6-438a-41c8-bb9b-5e7d56b555e4"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Trabzon"
                        },
                        new
                        {
                            Id = new Guid("6c0b5531-8d03-403a-9f9c-d3e618175e51"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Tunceli"
                        },
                        new
                        {
                            Id = new Guid("6699be67-872f-4bdb-88c9-846261c8ea0b"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Uşak"
                        },
                        new
                        {
                            Id = new Guid("1efb1557-a8f2-4dd3-b43b-bbd6131adfcc"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Van"
                        },
                        new
                        {
                            Id = new Guid("c0add994-3c3d-48ca-995d-4b5185e1f8b8"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Yalova"
                        },
                        new
                        {
                            Id = new Guid("fc19f1c4-ae3b-40a0-9588-a31ef1053132"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Yozgat"
                        },
                        new
                        {
                            Id = new Guid("b60a9ea4-976d-47c1-95f2-37497c43a645"),
                            CountryId = new Guid("fbaa76da-0f6b-46c7-930f-586e3bba2cf8"),
                            Name = "Zonguldak"
                        });
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.WorkPreference.WorkModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.ToTable("WorkModels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be2d4821-3c84-4552-b292-6305887b8fed"),
                            Name = "In-office"
                        },
                        new
                        {
                            Id = new Guid("5cfdd002-0e17-4f85-9785-af001251c568"),
                            Name = "Hybrid"
                        },
                        new
                        {
                            Id = new Guid("4cfa49e2-005a-45eb-a87d-63a35aa4a1b0"),
                            Name = "Remote"
                        });
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.WorkPreference.WorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.ToTable("WorkTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00b46edd-6fc4-4999-a141-a01d95d82ee3"),
                            Name = "Full-time"
                        },
                        new
                        {
                            Id = new Guid("eb124238-70cf-41f6-b5a2-f515c25515f2"),
                            Name = "Part-time"
                        },
                        new
                        {
                            Id = new Guid("d68427a8-96bb-4590-bf6f-29abbe47733f"),
                            Name = "Project-basis"
                        },
                        new
                        {
                            Id = new Guid("6116ed65-8da7-4820-9a92-8bd89caf03ab"),
                            Name = "Intern"
                        },
                        new
                        {
                            Id = new Guid("e6d8e023-8061-455a-98c1-ed8ccde1db3f"),
                            Name = "Freelance"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Identity.AppUser", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Institution.Company", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", "CreatedBy")
                        .WithOne("Company")
                        .HasForeignKey("JobSearch.Domain.Entities.Institution.Company", "CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Domain.Entities.Institution.Sector", "Sector")
                        .WithMany("Companies")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.JobPost.Job", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Institution.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", "CreatedBy")
                        .WithMany("Jobs")
                        .HasForeignKey("CreatedById");

                    b.HasOne("JobSearch.Domain.Entities.JobPost.Department", "Department")
                        .WithMany("Jobs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Domain.Entities.WorkPreference.WorkModel", "WorkModel")
                        .WithMany("Jobs")
                        .HasForeignKey("WorkModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Domain.Entities.WorkPreference.WorkType", "WorkType")
                        .WithMany("Jobs")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("WorkModel");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.JobPost.JobApplication", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", "Applicant")
                        .WithMany("JobApplications")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Domain.Entities.JobPost.Job", "Job")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Location.Address", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Institution.Company", "Company")
                        .WithOne("Address")
                        .HasForeignKey("JobSearch.Domain.Entities.Location.Address", "CompanyId");

                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", "CreatedBy")
                        .WithMany("Addresses")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Domain.Entities.Location.Province", "Province")
                        .WithMany("Addresses")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CreatedBy");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Location.Province", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Location.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("JobSearch.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Company");

                    b.Navigation("JobApplications");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Institution.Company", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Institution.Sector", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.JobPost.Department", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.JobPost.Job", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Location.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.Location.Province", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.WorkPreference.WorkModel", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobSearch.Domain.Entities.WorkPreference.WorkType", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
